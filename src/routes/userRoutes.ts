import express, { type Router, type Request, type Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User, { type IUser } from "../models/userModel"; // Import your User model with proper types

const router: Router = express.Router();
const SECRET_KEY = "your_secret_key";

interface CustomJwtPayload {
  id: string;
  username: string;
  role: string;
}

// üìå 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const { firstName, lastName, username, password, role } = req.body;

    if (!["student", "teacher"].includes(role)) {
      res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å" });
      return;
    }

    const existingUser = await User.findOne({ username });
    if (existingUser) {
      res.status(400).json({ message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ" });
      return;
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      firstName,
      lastName,
      username,
      password: hashedPassword,
      role,
    });

    await newUser.save();

    // Log user addition to console
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${newUser.username} (${newUser.role})`);

    res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üìå 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤—Ö–æ–¥)
const loginUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, password } = req.body;
    const user = (await User.findOne({ username })) as IUser | null; // Ensure proper typing

    if (!user) {
      res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      return;
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      return;
    }

    const token = jwt.sign(
      {
        id: user._id.toString(),
        username: user.username,
        role: user.role,
      },
      SECRET_KEY,
      { expiresIn: "1h" },
    );

    res.json({ token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üìå 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
const getUserInfo = async (req: Request, res: Response): Promise<void> => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) {
      res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      return;
    }

    const decoded = jwt.verify(token, SECRET_KEY) as CustomJwtPayload;
    const user = (await User.findById(decoded.id).select(
      "-password",
    )) as IUser | null;

    if (!user) {
      res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }
};

// üìå 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const deleteUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (await User.findByIdAndDelete(req.params.id)) as IUser | null;
    if (!user) {
      res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }
    res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

router.post("/register", registerUser);
router.post("/login", loginUser);
router.get("/me", getUserInfo);
router.delete("/:id", deleteUser);

export default router;
